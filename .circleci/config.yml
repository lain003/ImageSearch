version: 2

references:
  yarn_cache: &yarn_cache
    key: v1-js-dep-{{ arch }}-{{ checksum "yarn.lock" }}
    paths:
      - node_modules
  bundler_cache: &bundler_cache
    key: gem-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
    paths: vendor/bundle

jobs:
  rspec:
    docker:
      - image: circleci/ruby:2.7.0-buster
        environment:
          DOCKER_API_VERSION: 1.39
    steps:
      - checkout

      - run:
          name: Docker Compose をインストール
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - setup_remote_docker:
          docker_layer_caching: false # 有料プランならtrue

      - restore_cache:
          <<: *bundler_cache
      - restore_cache:
          <<: *yarn_cache

      - run:
          name: docker-compose up
          command: |
            docker-compose -f docker-compose-ci.yml up -d

      - run:
          name: 下準備
          command: |
            docker cp . project_image_search_1:/home/imagesearch
            docker-compose exec image_search bash -c 'cd /home/imagesearch && bundle install --path vendor/bundle'
            docker-compose exec image_search bash -c 'cd /home/imagesearch && yarn install --frozen-lockfile'
            mkdir -p /tmp/test-results
            curl -o wnjpn.db.gz http://compling.hss.ntu.edu.sg/wnja/data/1.1/wnjpn.db.gz
            gzip -d wnjpn.db.gz
            docker cp wnjpn.db project_image_search_1:/home/imagesearch/db/wnjpn.sqlite3
            echo $GCLOUD_SERVICE_KEY | tr -d ' ' | base64 --decode > tmp/googleapikey.json
            docker cp tmp/googleapikey.json project_image_search_1:/home/imagesearch/vendor/gcs/googleapikey.json
            docker cp project_image_search_1:/home/imagesearch/vendor/bundle vendor/bundle
            docker cp project_image_search_1:/home/imagesearch/node_modules node_modules

      - save_cache:
          <<: *bundler_cache
      - save_cache:
          <<: *yarn_cache

      - run:
          name: テスト実行
          command: |
            docker-compose exec image_search bash -c 'cd /home/imagesearch && bundle exec rspec --format progress --format RspecJunitFormatter --out /tmp/test-results/rspec.xml'
            docker-compose exec image_search bash -c 'mkdir -p /home/imagesearch/tmp/screenshots'
            mkdir -p ~/test-results/rspec/
            docker cp project_image_search_1:/tmp/test-results/rspec.xml ~/test-results/rspec/rspec.xml
            docker cp project_image_search_1:/home/imagesearch/tmp/screenshots ~/test-results/screenshots

      - store_test_results:
          path: /home/circleci/test-results
      - store_artifacts:
          path: /home/circleci/test-results/screenshots

      # ここからmaster
      - run:
          name: SECRET_KEY_BASEとassetsとseed
          command: |
            docker-compose exec image_search bash -i -c 'cd /home/imagesearch && echo export SECRET_KEY_BASE=`RAILS_ENV=production bundle exec rake secret` >> ~/.bashrc'
            docker-compose exec image_search bash -i -c 'cd /home/imagesearch && bundle exec rake assets:precompile RAILS_ENV=production'
            docker-compose exec image_search bash -i -c 'cd /home/imagesearch && yarn install --frozen-lockfile'
            docker-compose exec image_search bash -i -c 'wget https://imageupload-z321.s3-ap-northeast-1.amazonaws.com/development.sqlite3 -O /home/imagesearch/db/production.sqlite3'
# docker-compose exec image_search bash -c 'cd /home/imagesearch && bundle exec rake elastic_seed:run RAILS_ENV=production'

      - run:
          name: rails s
          command: |
            docker-compose exec image_search bash -i -c 'cd /home/imagesearch && bundle exec rails s -e production'

      - run:
          name: Nginxインストール etc
          command: |
            docker-compose exec image_search bash -c 'apt-get update'
            docker-compose exec image_search bash -c 'apt-get install -y nginx'
            docker cp vendor/circleci/template/nginx/nginx.conf project_image_search_1:/etc/nginx/nginx.conf
            docker-compose exec image_search bash -c 'mkdir -p /etc/nginx/sites'
            docker cp vendor/circleci/template/nginx/imagesearch.conf project_image_search_1:/etc/nginx/sites/imagesearch.conf

      - run:
          name: ElasticSearchPush
          command: |
            docker commit project_elastic_search_test_1 release_elastic_search
            docker tag release_elastic_search lain003/release_elastic_search
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push lain003/release_elastic_search

      - run:
          name: ImagePush
          command: |
            docker commit project_image_search_1 release_image_search
            docker tag release_image_search lain003/release_image_search
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            docker push lain003/release_image_search

workflows:
  version: 2
  test:
    jobs:
      - rspec